///////////////////////////////////////////////////////////
//  UI.cs
//  Implementation of the Class UI
//  Generated by Enterprise Architect
//  Created on:      28-Apr-2021 10:30:24 AM
//  Original author: Ugljesa
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using CacheControler_Project.Classes;
using CacheControler_Project.Enums;
using Common_Project.Classes;
using FileControler_Project.Enums;
using FileControler_Project.Classes;
using UI_Project.Classes.UI_Project.Classes;
using Common_Project.DistributedServices;

namespace UI_Project.Classes
{
    public class UI : IUIOps
    {

        private CacheControler m_CacheControler;
        private FileControler m_FileControler;

        public UI()
        {
            m_CacheControler = new CacheControler();
            m_FileControler = new FileControler();
        }

        ~UI()
        {

        }

        public List<AuditRecord> GetAuditEntities()
        { 
            return null;
        }

        public List<string> GetGeographicEntities()
        {

            return null;
        }

        /// 
        /// <param name="readReq"></param>
        public Tuple<EConcumptionReadStatus, List<ConsumptionRecord>> InitConsumptionRead(DSpanGeoReq dSpanGeoReq)
        {
            return m_CacheControler.DSpanGeoConsumptionRead(dSpanGeoReq);
        }

        public InitData InitDataLoad()
        {
            return null;
        }

        /// 
        /// <param name="filePath"></param>
        /// <param name="dataType"></param>
        public EFileLoadStatus InitFileLoad(string filePath, ELoadDataType dataType)
        {

            var fileLoadStoreDBResult = m_FileControler.LoadFileStoreDB(filePath, dataType);
            //m_CacheControler.ConsumptionUpdateHandler(fileLoadStoreDBResult.Item2);		// TODO in Cache component
            return fileLoadStoreDBResult.Item1;
        }

        /// 
        /// <param name="gEntity"></param>
        public Tuple<EPostGeoEntityStatus, EGeoRecordStatus> PostGeoEntitiy(GeoRecord gEntity)
        {

            return null;
        }

        /// 
        /// <param name="name"></param>
        public EUpdateGeoStatus UpdateGeoEntity(string name)
        {

            return EUpdateGeoStatus.Success;
        }

       

    }//end UI
}