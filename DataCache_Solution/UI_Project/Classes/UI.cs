///////////////////////////////////////////////////////////
//  UI.cs
//  Implementation of the Class UI
//  Generated by Enterprise Architect
//  Created on:      28-Apr-2021 10:30:24 AM
//  Original author: Ugljesa
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using CacheControler_Project.Classes;
using CacheControler_Project.Enums;
using Common_Project.Classes;
using FileControler_Project.Enums;
using FileControler_Project.Classes;

using Common_Project.DistributedServices;
using System.Linq;
using UI_Project.ClientServices;
using ConnectionControler_Project.Classes;

namespace UI_Project.Classes
{
    public class UI : IUIOps
    {

        private CacheControler m_CacheControler;
        private FileControler m_FileControler;
        private IFunctionalReq m_ConnectionControler;

        public UI()
        {
            m_CacheControler = new CacheControler();
            m_FileControler = new FileControler();
            m_ConnectionControler = ConnectionControler.Instance as IFunctionalReq;
        }

        ~UI()
        {

        }

        public bool DBOnline { get { return m_CacheControler.DBOnline; } }
        public bool DBReconnect()
        {
            return m_CacheControler.DBTryReconnect();
        }

        public bool Echo()
        {
            return m_ConnectionControler.Echo();
        }

        public List<AuditRecord> GetAuditEntities()
        { 
            return m_CacheControler.CachedAudit;
        }

        public List<string> GetGeographicEntities()
        {
            return m_CacheControler.CachedGeo.Keys.ToList() ;
        }

        /// 
        /// <param name="readReq"></param>
        public Tuple<EConcumptionReadStatus, List<ConsumptionRecord>> InitConsumptionRead(DSpanGeoReq dSpanGeoReq)
        {
            return m_CacheControler.DSpanGeoConsumptionRead(dSpanGeoReq);
        }

        /// 
        /// <param name="filePath"></param>
        /// <param name="dataType"></param>
        public EFileLoadStatus InitFileLoad(string filePath, ELoadDataType dataType)
        {

            var fileLoadStoreDBResult = m_FileControler.LoadFileStoreDB(filePath, dataType);
            m_CacheControler.ConsumptionUpdateHandler(fileLoadStoreDBResult.Item1, fileLoadStoreDBResult.Item2.Item2);		
            return fileLoadStoreDBResult.Item2.Item1;
        }

        /// 
        /// <param name="gEntity"></param>
        public EPostGeoEntityStatus PostGeoEntitiy(GeoRecord gEntity)
        {
            return m_CacheControler.AddNewGeoEntity(gEntity);
        }

        /// 
        /// <param name="name"></param>
        public EUpdateGeoStatus UpdateGeoEntity(string oldName, string newName)
        {
            m_CacheControler.UpdateGeoEntity(oldName, newName);
            return EUpdateGeoStatus.Success;
        }

       

    }//end UI
}