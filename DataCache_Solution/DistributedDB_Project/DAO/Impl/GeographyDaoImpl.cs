///////////////////////////////////////////////////////////
//  GeographyDaoImpl.cs
//  Implementation of the Class GeographyDaoImpl
//  Generated by Enterprise Architect
//  Created on:      07-May-2021 2:59:26 PM
//  Original author: Ugljesa
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Common_Project.Classes;
using System.Data;
using DistributedDB_Project.Connection;
using DistributedDB_Project.DAO.Impl;
using DistributedDB_Project.Exceptions.ExceptionAbstraction;
using Oracle.ManagedDataAccess.Client;

public class GeographyDaoImpl : IGeographyDAO {

	public GeographyDaoImpl(){

	}

	~GeographyDaoImpl(){

	}

    public int Count()
    {
        string query = "SELECT COUNT(*) FROM geography_subsystem ";                         

        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            using (IDbCommand command = connection.CreateCommand())
            {
                command.CommandText = query;
                command.Prepare();

                return Convert.ToInt32(command.ExecuteScalar());
            }
        }
    }

    private void ExecuteNonQueryCommand(string query)
    {
        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            using (IDbCommand command = connection.CreateCommand())
            {
                command.CommandText = query;
                command.Prepare();
                command.ExecuteNonQuery();
            }
        }
    }

    private void ExecuteNonQueryCommand(string query, IDbConnection connection)
    {

        using (IDbCommand command = connection.CreateCommand())
        {
            command.CommandText = query;
            command.Prepare();
            command.ExecuteNonQuery();
        }
    }

    private bool IsAttached(string gID, IDbConnection connection)
    {
        string query = String.Format
                              ("SELECT COUNT(*) FROM EES ee " +
                               "WHERE ee.GID='{0}' ", gID);

        using (IDbCommand command = connection.CreateCommand())
        {
            command.CommandText = query;
            command.Prepare();
            return Int32.Parse(command.ExecuteScalar().ToString()) >0;
        }
    }

    public bool Delete(GeoRecord entity)
    {
        if(ExistsById(entity.GID))
        {
            using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
            {
                connection.Open();

                if(IsAttached(entity.GID, connection))
                {
                    List<string> attachedQ = new List<string>();
                    attachedQ.Add("EES");
                    throw new StillAttachedException("geography_subsystem", attachedQ, "Still attached, check if any record contains targeted GID");
                }
                else
                {
                    string query = String.Format
                                          ("DELETE "+
                                           "FROM geography_subsystem gg " +
                                           "WHERE gg.GID='{0}' ",entity.GID);

                    using (IDbCommand command = connection.CreateCommand())
                    {
                        command.CommandText = query;
                        command.Prepare();
                        command.ExecuteNonQuery();
                    }
                    return true;
                }   
            }
        }
        else return false;
    }

    public void DeleteAll() // All available
    {
        string query = "SELECT gg.GID FROM geography_subsystem gg ";
        List<string> targs = new List<string>();

        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            using (IDbCommand command = connection.CreateCommand())
            {
                command.CommandText = query;
                command.Prepare();

                using (IDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read()) targs.Add(reader.GetString(0));
                }
            }
        }

        DeleteById(targs);  // Mocking
    }

    public bool DeleteById(string id)
    {
        return Delete(new GeoRecord(id, ""));// Mocking
    }

    public void DeleteById(List<string> targs)
    {
        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            foreach(var entity in targs)
            {
                if (ExistsById(entity, connection))
                {
                    if (!IsAttached(entity, connection))
                    {
                        string query = String.Format
                                              ("DELETE " +
                                               "FROM geography_subsystem gg " +
                                               "WHERE gg.GID='{0}' ", entity);

                        using (IDbCommand command = connection.CreateCommand())
                        {
                            command.CommandText = query;
                            command.Prepare();
                            command.ExecuteNonQuery();
                        }
                    }
                }
            }
        }
    }

    public bool ExistsById(string id)
    {
        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            using (IDbCommand command = connection.CreateCommand())
            {

                string query = String.Format
                                      ("SELECT gg.GID " +
                                       "FROM geography_subsystem gg " +
                                       "WHERE gg.GID = '{0}' ", id);

                command.CommandText = query;
                command.Prepare();
                return command.ExecuteScalar() != null;
            }
        }
    }

    public bool ExistsById(string id, IDbConnection connection)
    {

        using (IDbCommand command = connection.CreateCommand())
        {
            string query = String.Format
                                  ("SELECT gg.GID " +
                                   "FROM geography_subsystem gg " +
                                   "WHERE gg.GID = '{0}' ", id);

            command.CommandText = query;
            command.Prepare();
            return command.ExecuteScalar() != null;
        }
        
    }

    public bool ExistsByName(string name, IDbConnection connection)
    {

        using (IDbCommand command = connection.CreateCommand())
        {

            string query = String.Format
                                  ("SELECT gg.GID " +
                                   "FROM geography_subsystem gg " +
                                   "WHERE gg.GNAME = '{0}' ", name);

            command.CommandText = query;
            command.Prepare();
            return command.ExecuteScalar() != null;
        }

    }

    private IEnumerable<GeoRecord> GetMultipleGeosByQuery(string query) // Better solution for future upgrades
    {
        List<GeoRecord> retVal = new List<GeoRecord>();
        string tmpGID, tmpGName;

        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            using (IDbCommand command = connection.CreateCommand())
            {
                command.CommandText = query;
                command.Prepare();

                using (IDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        try
                        {
                            tmpGID   = reader.GetString(0);
                            tmpGName = reader.GetString(1);
                            retVal.Add(new GeoRecord(tmpGID, tmpGName));
                        }
                        catch (ArgumentNullException)
                        {
                            return retVal;
                        }
                        catch (System.InvalidOperationException) 
                        {
                            return retVal;
                        }
                        
                    };
                }

            }
        }
        return retVal;
    }

    private GeoRecord GetSingleGeoByQuery(string query) // Better solution for future upgrades
    {

        GeoRecord retVal= new GeoRecord();
        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            using (IDbCommand command = connection.CreateCommand())
            {
                command.CommandText = query;
                command.Prepare();
                using (IDataReader reader = command.ExecuteReader())
                {
                    reader.Read();  // IMPORTANT: reader disposes itself after failed read
                    try
                    {

                        retVal.GID = reader.GetString(0); 
                        retVal.GName = reader.GetString(1);
                    }
                    catch (ArgumentNullException)
                    {
                        return retVal;
                    }
                    catch (System.InvalidOperationException)
                    {
                        return retVal;
                    }
                }
            }
        }
        return retVal;
    }

    public IEnumerable<GeoRecord> FindAll()
    {
        string query = "SELECT gg.GID, gg.GNAME " +
                       "FROM geography_subsystem gg ";

        return GetMultipleGeosByQuery(query);
    }

    public IEnumerable<GeoRecord> FindAllById(IEnumerable<string> ids)
    {
        string query = String.Format
                              ("SELECT gg.GID, gg.GNAME " +
                               "FROM geography_subsystem gg " +
                               "WHERE gg.GID IN {0}", CommonImpl.FormatComplexVarCharArgument(ids));

        return GetMultipleGeosByQuery(query);
    }

    public GeoRecord FindById(string id)
    {
        string query = String.Format
                              ("SELECT gg.GID, gg.GNAME " +
                               "FROM geography_subsystem gg "+
                               "WHERE gg.GID = '{0}' ", id);

        return GetSingleGeoByQuery(query);
    }

    public void Save(GeoRecord entity)
    {
       string query = String.Format
                             ("SELECT COUNT(*) FROM geography_subsystem gg " +
                              "WHERE gg.GID = '{0}' ", entity.GID);

        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            using (IDbCommand command = connection.CreateCommand())
            {
                command.CommandText = query;
                command.Prepare();
                if(Convert.ToInt32(command.ExecuteScalar())==0)
                {
                    //To add
                    query = String.Format
                                   ("INSERT INTO geography_subsystem (GID,GNAME) " +
                                    "VALUES ('{0}', '{1}') ", entity.GID, entity.GName);
                    command.CommandText = query;
                    command.Prepare();
                    command.ExecuteNonQuery();
                }
                else
                {
                    //Already in
                    throw new PrimaryKeyConstraintViolationException(entity.GID, "geography_subsystem", "Primary key(GID): " +
                                                            entity.GID+ " already used in: geography_subsystem");
                }
            }
        }
    }

    public void SaveAll(IEnumerable<GeoRecord> entities)
    {

        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            using (IDbCommand command = connection.CreateCommand())
            {

                foreach (var entity in entities)
                {
                    string query = String.Format("SELECT COUNT(*) FROM geography_subsystem gg " +
                                            "WHERE gg.GID = '{0}' ", entity.GID);


                    command.CommandText = query;
                    command.Prepare();
                    if (Convert.ToInt32(command.ExecuteScalar()) == 0)
                    {
                        //To add
                        query = String.Format("INSERT INTO geography_subsystem (GID,GNAME) " +
                                                "VALUES ('{0}', '{1}') ", entity.GID, entity.GName);
                        command.CommandText = query;
                        command.Prepare();
                        command.ExecuteNonQuery();
                    }
                }
            }
        }
    }

    public void SingleGeoUpdate(string oldGeoName, string newGeoName)
    {
        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();

            if(ExistsByName(oldGeoName, connection))
            {
                using (IDbCommand command = connection.CreateCommand())
                {
                    string query = String.Format("UPDATE geography_subsystem " +
                                                    "SET GNAME = '{0}' " +
                                                    "WHERE GNAME = '{1}' ", newGeoName, oldGeoName);

                    command.CommandText = query;
                    command.Prepare();
                    command.ExecuteNonQuery();

                }
            }     
        }
    }

}//end GeographyDaoImpl