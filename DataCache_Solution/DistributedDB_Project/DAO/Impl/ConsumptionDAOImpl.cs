///////////////////////////////////////////////////////////
//  ConsumptionDAOImpl.cs
//  Implementation of the Class ConsumptionDAOImpl
//  Generated by Enterprise Architect
//  Created on:      07-May-2021 2:59:24 PM
//  Original author: Ugljesa
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using Common_Project.Classes;
using System.Data;
using DistributedDB_Project.Connection;
using Oracle.ManagedDataAccess.Client;
using System.Linq;
using DistributedDB_Project.DAO.Impl;
using DistributedDB_Project.Exceptions;

public class ConsumptionDAOImpl : IConsumptionDAO
{

    private ConsumptionUpdate sharedUpdate; // Works only when paralelisation is excluded

    public ConsumptionDAOImpl(){

	}

	~ConsumptionDAOImpl(){

	}

    public int Count()
    {
        string query = "SELECT COUNT(*) FROM CONSUMPTION ";                         //Not all EES records are consumption records

        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            using (IDbCommand command = connection.CreateCommand())
            {
                command.CommandText = query;
                command.Prepare();
                return Convert.ToInt32(command.ExecuteScalar());
            }
        }
    }

    private ConsumptionRecord LoadConumptionRecordSingleByQuery(string query)
    {
        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            using (IDbCommand command = connection.CreateCommand())
            {
                command.CommandText = query;
                command.Prepare();
                using (IDataReader reader = command.ExecuteReader())
                {
                    if(reader.Read())
                    {
                        return new ConsumptionRecord(reader.GetString(0), reader.GetInt32(1), reader.GetString(2));
                    }
                }
            }
        }
        return new ConsumptionRecord(); //Empty better than null & Exception
    }

    private IEnumerable<ConsumptionRecord> LoadConumptionRecordsMultipleByQuery(string query)
    {
        List<ConsumptionRecord> retVal = new List<ConsumptionRecord>();

        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            using (IDbCommand command = connection.CreateCommand())
            {
                command.CommandText = query;
                command.Prepare();

                using (IDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read()) retVal.Add(new ConsumptionRecord(reader.GetString(0), reader.GetInt32(1), reader.GetString(2)));
                }  
            }
        }
        return retVal;  
    }

    private void ExecuteNonQueryCommand(string query)
    {
        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            using (IDbCommand command = connection.CreateCommand())
            {
                command.CommandText = query;
                command.Prepare();
                command.ExecuteNonQuery(); 
            }
        }
    }

    private void ExecuteNonQueryCommand(string query, IDbConnection connection)
    {
        using (IDbCommand command = connection.CreateCommand())
        {
            command.CommandText = query;
            command.Prepare();
            command.ExecuteNonQuery();
        }
    }

    public bool Delete(ConsumptionRecord entity)
    {
        int targetRECID;
        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            using (IDbCommand command = connection.CreateCommand())
            {
                string query =  "SELECT ee.RECID " +
                                "FROM EES ee, CONSUMPTION cc, CONSUMPTION_RECORDED cr " +    // Get targetRECID for entity
                                "WHERE cr.recid = ee.recid " +
                                "AND cr.cid = cc.cid " +
                                "AND ee.TIME_STAMP = '" + entity.TimeStamp + "' " +
                                "AND ee.GID = '" + entity.GID + "' " +
                                "AND cc.MWH =" + entity.MWh;

                command.CommandText = query;
                command.Prepare();
                var tmpObject = command.ExecuteScalar();
                if (tmpObject == null) return false;

                targetRECID = Convert.ToInt32(tmpObject);        
            }
        }

        return this.DeleteById(targetRECID.ToString());      
        // Note Geography records stay even after all EES records are removed (to support add through UI option)
    }

    public void DeleteAll()
    {
        // Read documentation for delete logic
        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            string query = "DELETE consumption_audited ";
            ExecuteNonQueryCommand(query, connection);
            query = "DELETE consumption_recorded ";
            ExecuteNonQueryCommand(query, connection);
            query = "DELETE consumption_audit ";
            ExecuteNonQueryCommand(query, connection);
            query = "DELETE consumption ";
            ExecuteNonQueryCommand(query, connection);
            query = "DELETE ees ";
            ExecuteNonQueryCommand(query, connection);
        }
    }

    public bool DeleteById(string targetRECID)
    {
        // Read documentation for delete logic
        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            using (IDbCommand command = connection.CreateCommand())
            {

                string query =  "SELECT cc.CID " +                                    // Get all consumption records associated with it (should be 1 only)
                                "FROM EES ee, CONSUMPTION cc, CONSUMPTION_RECORDED cr " +
                                "WHERE cr.recid = ee.recid AND cr.cid = cc.cid " +
                                "AND ee.recid = " + targetRECID;

                command.CommandText = query;
                command.Prepare();
                List<string> toDeleteCIDs = new List<string>();
                using (IDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read()) toDeleteCIDs.Add(reader.GetInt32(0).ToString());
                }
                if (toDeleteCIDs.Count == 0) return false;                           // Each Consumption record has its EES record

                query = "SELECT ca.AID " +                                           // Get all audit records associated with it (0:N)
                        "FROM EES ee, CONSUMPTION_AUDIT ca, CONSUMPTION_AUDITED cad " +
                        "WHERE ee.recid = cad.recid AND ca.aid = cad.aid " +
                        "AND ee.recid = " + targetRECID;
                command.CommandText = query;
                command.Prepare();
                List<string> toDeleteAIDs = new List<string>();
                using (IDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read()) toDeleteAIDs.Add(reader.GetInt32(0).ToString());
                }

                if (toDeleteAIDs.Count == 0) return false;

                query =  "DELETE " +                                                  // Break consumption connections
                         "FROM consumption_recorded cr " +
                         "WHERE cr.RECID = " + targetRECID + " ";
                ExecuteNonQueryCommand(query, connection);

                query = "DELETE " +                                                  // Delete consumption records
                         "FROM consumption cc " +
                         "WHERE cc.CID IN " + CommonImpl.FormatComplexArgument(toDeleteCIDs) + " ";
                ExecuteNonQueryCommand(query, connection);

                query = "DELETE " +                                                  // Break audit connections
                         "FROM consumption_audited ca " +
                         "WHERE ca.RECID = " + targetRECID + " ";
                ExecuteNonQueryCommand(query, connection);


                query += "DELETE " +                                                  // Delete audit records
                         "FROM consumption_audit ca " +
                         "WHERE ca.AID IN " + CommonImpl.FormatComplexArgument(toDeleteAIDs) + " ";
                ExecuteNonQueryCommand(query, connection);

                query += "DELETE " +                                                  // Delete EES record
                         "FROM EES ee " +
                         "WHERE ee.RECID = " + targetRECID +" ";
                ExecuteNonQueryCommand(query, connection);
            }
        }
        return true;
    }

    public bool ExistsById(string id)
    {

        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            using (IDbCommand command = connection.CreateCommand())
            {

                string query =  "SELECT ee.RECID " +
                                "FROM EES ee, CONSUMPTION_RECORDED cr, CONSUMPTION cc " +    
                                "WHERE ee.recid = cr.recid " +
                                "AND cc.cid = cr.cid " +
                                "AND ee.RECID = " + id; 

                command.CommandText = query;
                command.Prepare();
                return command.ExecuteScalar() != null;
            }
        }
    }

    public bool ExistsByContent(ConsumptionRecord record)
    {
        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            using (IDbCommand command = connection.CreateCommand())
            {

                string query = "SELECT ee.RECID "+                                           //Is in DB?
                        "FROM EES ee, CONSUMPTION_RECORDED cr, CONSUMPTION cc " +
                        "WHERE ee.recid = cr.recid " +
                        "AND cc.cid = cr.cid " +
                        "AND  ee.time_stamp='" + record.TimeStamp + "' " +
                        "AND  ee.GID='" + record.GID + "' ";

                command.CommandText = query;
                command.Prepare();
                return command.ExecuteScalar() != null;                               
            }
        }
    }

    public IEnumerable<ConsumptionRecord> FindAll()
    {
        string query =  "SELECT ee.gid, cc.mwh, ee.time_stamp " +
                        "FROM EES ee, CONSUMPTION_RECORDED cr, CONSUMPTION cc " +
                        "WHERE ee.recid = cr.recid AND cc.cid = cr.cid ";

        return LoadConumptionRecordsMultipleByQuery(query);
    }

    public IEnumerable<ConsumptionRecord> FindAllById(IEnumerable<string> ids)
    {
        string query =  "SELECT ee.gid, cc.mwh, ee.time_stamp " +
                        "FROM EES ee, CONSUMPTION_RECORDED cr, CONSUMPTION cc " +
                        "WHERE ee.recid = cr.recid AND cc.cid = cr.cid " +
                        "AND ee.recid IN " + CommonImpl.FormatComplexArgument(ids);

       
        return LoadConumptionRecordsMultipleByQuery(query);
    }

    public ConsumptionRecord FindById(string id)
    {
        string query =  "SELECT ee.gid, cc.mwh, ee.time_stamp " +
                        "FROM EES ee, CONSUMPTION_RECORDED cr, CONSUMPTION cc " +
                        "WHERE ee.recid = cr.recid " +
                        "AND cc.cid = cr.cid " +
                        "AND ee.recid = " + id;

        return LoadConumptionRecordSingleByQuery(query);
    }


    public List<ConsumptionRecord> FindByCountry(string countryID)
    {
        string query =String.Format 
                       ("SELECT ee.gid, cc.mwh, ee.time_stamp " +
                        "FROM EES ee, CONSUMPTION_RECORDED cr, CONSUMPTION cc " +
                        "WHERE ee.recid = cr.recid AND cc.cid = cr.cid " +
                        "AND ee.GID = '{0}'", countryID );

        return (List<ConsumptionRecord>)LoadConumptionRecordsMultipleByQuery(query);
    }

    public List<ConsumptionRecord> FindByCountryAndDate(string countryID, string targetTimestamp)
    {
        string query = String.Format
                       ("SELECT ee.gid, cc.mwh, ee.time_stamp " +
                        "FROM EES ee, CONSUMPTION_RECORDED cr, CONSUMPTION cc " +
                        "WHERE ee.recid = cr.recid AND cc.cid = cr.cid " +
                        "AND ee.GID= '" + countryID+"' "+
                        "AND ee.time_stamp LIKE'{0}%'",targetTimestamp);

        return (List<ConsumptionRecord>)LoadConumptionRecordsMultipleByQuery(query);
    }

    public List<ConsumptionRecord> FindByCountryAndDatespan(string gID, string from, string till)
    {
        string query = "";
        query = String.Format
               ("CREATE OR REPLACE VIEW initRows AS " +
                "SELECT gid, mwh, time_stamp, year_, month_, day_ FROM ( " +
                    "SELECT * FROM ( " +
                        "SELECT * FROM ( " +
                            "SELECT  ee.time_stamp, ee.gid, cc.mwh, " +
                                "CAST (SUBSTR(ee.Time_stamp,1,4) AS Integer) AS year_, " +
                                "CAST (SUBSTR(ee.Time_stamp,6,2) AS Integer) AS month_, " +
                                "CAST (SUBSTR(ee.Time_stamp,9,2) AS Integer) AS day_ " +

                            "FROM EES ee, CONSUMPTION_RECORDED cr, CONSUMPTION cc " +
                            "WHERE ee.recid=cr.recid " +
                            "AND cc.cid=cr.cid " +
                            "AND ee.gid='{0}')" +
                    "WHERE year_  >= {1})) ", gID, from.Substring(0, 4));

        ExecuteNonQueryCommand(query);

        string  leftYear    = from.Substring(0, 4),  
                leftMonth   = from.Substring(5, 2), 
                leftDay     = from.Substring(8, 2),
                rightYear   = till.Substring(0, 4), 
                rightMonth  = till.Substring(5, 2),
                rightDay    = till.Substring(8, 2);

        query = String.Format
                ("SELECT * FROM initRows " +                //Nisu rubne po godinama su ok
                 "WHERE year_ BETWEEN {0} AND {1} " +

                 "UNION " +

                 "SELECT * FROM initRows " +                 //Rubni po godini ok po mjesecu
                 "WHERE year_ = {2} " +
                 "AND month_  >= {3} " +

                 "UNION " +

                 "SELECT * " +
                 "FROM initRows " +                          //Rubno po godini i mjesecu ok po danu
                 "WHERE year_ = {4} " +
                 "AND month_ = {5} " +
                 "AND day_    >= {6} " +

                 "UNION " +

                 "SELECT * FROM initRows " +                 //Analogno desna granica
                 "WHERE year_ = {7} " +
                 "AND month_  <= {8} " +
                              
                 "UNION " + 

                 "SELECT * FROM initRows " +
                 "WHERE year_ = {9} " +
                 "AND month_ = {10} " +
                 "AND day_    <= {11}",  
                 leftYear,  rightYear, 
                 leftYear,  leftMonth, 
                 leftYear,  leftMonth, leftDay, 
                 rightYear, rightMonth, 
                 rightYear, rightMonth, rightDay);

        //Create or replace, strategy: keep view
        return (List<ConsumptionRecord>)LoadConumptionRecordsMultipleByQuery(query);
    }

    public List<ConsumptionRecord> FindByGeographyAndAfterDate(string gID, string from)
    {
        string query = "";

        query = String.Format
                ("CREATE OR REPLACE VIEW initRows AS " +
                 "SELECT gid, mwh, time_stamp, year_, month_, day_ FROM ( " +
                    "SELECT * FROM ( " +
                    "SELECT * FROM ( " +
                        "SELECT  ee.time_stamp, ee.gid, cc.mwh, " +
                            "CAST (SUBSTR(ee.Time_stamp,1,4) AS Integer) AS year_, " +
                            "CAST (SUBSTR(ee.Time_stamp,6,2) AS Integer) AS month_, " +
                            "CAST (SUBSTR(ee.Time_stamp,9,2) AS Integer) AS day_ " +

                        "FROM EES ee, CONSUMPTION_RECORDED cr, CONSUMPTION cc " +
                        "WHERE ee.recid=cr.recid " +
                        "AND cc.cid=cr.cid " +
                        "AND ee.gid='{0}')" +
                    "WHERE year_  >= {1})) ", gID, from.Substring(0, 4));
        ExecuteNonQueryCommand(query);

        query=String.Format
              ("SELECT * " +
               "FROM initRows " +
               "WHERE month_ >= {0} " +

               "UNION " +

               "SELECT * " +
               "FROM initRows " +
               "WHERE month_ = {1} " +
               "AND   day_   >= {2} ", 
               from.Substring(5, 2), from.Substring(5, 2), from.Substring(8, 2)); 

        //Create or replace, strategy: keep view

        return (List<ConsumptionRecord>)LoadConumptionRecordsMultipleByQuery(query);
    }

    public List<ConsumptionRecord> FindByGeographyAndBeforeDate(string gID, string before)
    {
        string query = "";

        query = String.Format
                ("CREATE OR REPLACE VIEW initRows AS " +
                 "SELECT gid, mwh, time_stamp, year_, month_, day_ FROM ( " +
                    "SELECT * FROM ( " +
                    "SELECT * FROM ( " +
                        "SELECT  ee.time_stamp, ee.gid, cc.mwh, " +
                            "CAST (SUBSTR(ee.Time_stamp,1,4) AS Integer) AS year_, " +
                            "CAST (SUBSTR(ee.Time_stamp,6,2) AS Integer) AS month_, " +
                            "CAST (SUBSTR(ee.Time_stamp,9,2) AS Integer) AS day_ " +

                        "FROM EES ee, CONSUMPTION_RECORDED cr, CONSUMPTION cc " +
                        "WHERE ee.recid=cr.recid " +
                        "AND cc.cid=cr.cid " +
                        "AND ee.gid='{0}')" +
                    "WHERE year_  <= {1})) ", gID, before.Substring(0, 4));
        ExecuteNonQueryCommand(query);

        query = String.Format("SELECT * " +
             "FROM initRows " +
             "WHERE month_ <= {0} " +

             "UNION " +

             "SELECT * " +
             "FROM initRows " +
             "WHERE month_ = {1} " +
             "AND   day_   <= {2} ", before.Substring(5, 2), before.Substring(5, 2), before.Substring(8, 2));

        //Create or replace, strategy: keep view
        return (List<ConsumptionRecord>)LoadConumptionRecordsMultipleByQuery(query);
    }
 
    private int RandomPKGenerator(string queryForPKs, IDbConnection connection) // Generates random PK for new elements
    {                                                                           // queryForPKs - finds already used keys
        var exclude = new HashSet<int>();
        using (IDbCommand command = connection.CreateCommand())
        {
            command.CommandText = queryForPKs;
            command.Prepare();
            using (IDataReader reader = command.ExecuteReader())
            {
                while (reader.Read())
                {
                    exclude.Add(reader.GetInt32(0));    // Read PK
                }
            }
        }
  
        // Possible improvement: Switching whole system from int to unsigned for bigger PK range
        var range = Enumerable.Range(1, Int32.MaxValue).Where(i => !exclude.Contains(i));
        var rand = new System.Random();
        int index = rand.Next(0, 100 - exclude.Count);
        return range.ElementAt(index);
    }

    internal static int FindEEsPK(ConsumptionRecord record, IDbConnection connection )              //For Consumption record finds its prent EES record
    {
        string query =  "SELECT ee.RECID FROM  ees ee " +
                        "WHERE ee.time_stamp ='" + record.TimeStamp + "' " +
                        "AND   ee.gid='" + record.GID + "' ";

        int retVal;
        using (IDbCommand command = connection.CreateCommand())
        {
            command.CommandText = query;
            command.Prepare();
            var tmpObj = command.ExecuteScalar();
            if (tmpObj == null) return -1;
            if (!Int32.TryParse(tmpObj.ToString(), out retVal)) return -1;
            return retVal;
        }
    }

    public void Save(ConsumptionRecord entity)
    { 
        sharedUpdate = new ConsumptionUpdate();
        string query = "";
        int recID, cID, aID, chkVal;

        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();

            if (!CommonImpl.ContainsPK(entity.GID, ETableType.Geography, connection))               // Geo known?
            {
                query = String.Format
                        ("INSERT INTO GEOGRAPHY_SUBSYSTEM(GID, GNAME) " +                           // Insert into geo. table
                         "VALUES('{0}','{1}') ", entity.GID, entity.GID);
                ExecuteNonQueryCommand(query, connection);

                sharedUpdate.NewGeos.Add(entity.GID);                                               // Add new Geo. 
            }


            recID = FindEEsPK(entity, connection);
            if (recID == -1)                                                                        // Is a first miss or first consumptipn
            {
                recID = RandomPKGenerator("SELECT RECID FROM EES ", connection);                   // Insert EES (common for consumption & audit)
                query = String.Format
                        ("INSERT INTO EES (RECID, TIME_STAMP, GID) " +
                         "VALUES({0},'{1}', '{2}') ", recID, entity.TimeStamp, entity.GID);
                ExecuteNonQueryCommand(query, connection);

                if (entity.MWh == -1)                                                              // First audit (miss)
                {
                    aID = RandomPKGenerator("SELECT AID FROM CONSUMPTION_AUDIT ", connection);
                    query = String.Format
                            ("INSERT INTO CONSUMPTION_AUDIT (AID, DUPVAL) " +                      // Make audit record
                             "VALUES({0}, {1}) ", aID, entity.MWh);
                    ExecuteNonQueryCommand(query, connection);

                    query = String.Format
                            ("INSERT INTO CONSUMPTION_AUDITED(AID, RECID) " +                      // Link them
                             "VALUES({0}, {1}) ", aID, recID);
                    ExecuteNonQueryCommand(query, connection);
                    if (!sharedUpdate.DupsAndMisses.ContainsKey(entity.GID))
                    {
                        sharedUpdate.DupsAndMisses.Add(entity.GID,
                            new Tuple<List<Tuple<int, int>>, List<int>>(new List<Tuple<int, int>>(), new List<int>()));
                    }

                    sharedUpdate.DupsAndMisses[entity.GID].Item2.Add(entity.GetHour());            // Record it for update
                }
                else                                                                               // First consumption
                {
                    cID = RandomPKGenerator("SELECT CID FROM CONSUMPTION ", connection);
                    query = String.Format
                            ("INSERT INTO CONSUMPTION (CID, MWH) " +                               // Make consumption record
                             "VALUES({0}, {1}) ", cID, entity.MWh);
                    ExecuteNonQueryCommand(query, connection);

                    query = String.Format
                            ("INSERT INTO CONSUMPTION_RECORDED(CID, RECID) " +                     // Link them
                             "VALUES({0}, {1}) ", cID, recID);
                    ExecuteNonQueryCommand(query, connection);
                }
            }
            else                                                                                   // Has audits or consumptions
            {

                query = String.Format
                        ("SELECT car.RECID " +                                                     //Check has original consumption 
                         "FROM consumption_recorded car LEFT OUTER JOIN ees ee " +
                         "ON car.RECID = ee.RECID LEFT OUTER JOIN consumption cac " +
                         "ON cac.CID = car.CID " +
                         "WHERE car.RECID = {0} ", recID);

                using (IDbCommand command = connection.CreateCommand())
                {
                    command.CommandText = query;
                    command.Prepare();
                    var tmpObj = command.ExecuteScalar();
                    if (tmpObj == null) chkVal = -1;
                    else if (!Int32.TryParse(tmpObj.ToString(), out chkVal)) chkVal = -1;
                }

                if (entity.MWh == -1)                                                              // Is a miss
                {

                    if (chkVal == -1)                                                              // And has no original consumption
                    {
                        query = "SELECT count(*) " +
                                "FROM consumption_audited cad LEFT OUTER JOIN ees ee " +
                                "ON cad.RECID = ee.RECID LEFT OUTER JOIN consumption_audit ca " +
                                "ON ca.AID = cad.AID " +
                                "WHERE cad.RECID =  " + recID + " " +
                                "AND ca.DUPVAL =  " + entity.MWh + " ";

                        using (IDbCommand command = connection.CreateCommand())
                        {
                            command.CommandText = query;
                            command.Prepare();

                            if (Int32.Parse(command.ExecuteScalar().ToString()) == 0)              // Not the exact one
                            {

                                aID = RandomPKGenerator("SELECT AID FROM CONSUMPTION_AUDIT ", connection);
                                query = String.Format
                                        ("INSERT INTO CONSUMPTION_AUDIT (AID, DUPVAL) " +          // Make audit record
                                         "VALUES({0}, {1}) ", aID, entity.MWh);
                                ExecuteNonQueryCommand(query, connection);

                                query = String.Format
                                        ("INSERT INTO CONSUMPTION_AUDITED(AID, RECID) " +          // Link them
                                         "VALUES({0}, {1}) ", aID, recID);
                                ExecuteNonQueryCommand(query, connection);

                                if (!sharedUpdate.DupsAndMisses.ContainsKey(entity.GID))
                                {
                                    sharedUpdate.DupsAndMisses.Add(entity.GID,
                                        new Tuple<List<Tuple<int, int>>, List<int>>(new List<Tuple<int, int>>(), new List<int>()));
                                }
                                sharedUpdate.DupsAndMisses[entity.GID].Item2.Add(entity.GetHour());                 // Record it for update
                            }


                        }
                    }
                    //Miss and has original value => Ignore
                }
                else                                                                                                // Duplicate or original after misses
                {

                    if (chkVal != -1)                                                                               // Original exists (line 594)
                    {

                        using (IDbCommand command = connection.CreateCommand())
                        {
                            command.CommandText = query;
                            command.Prepare();

                            query = "SELECT count(*) " +
                                    "FROM consumption_audited cad LEFT OUTER JOIN consumption_audit ca ON cad.AID = ca.AID " +
                                    "WHERE cad.RECID = " + chkVal + " " +
                                    "AND ca.DUPVAL = " + entity.MWh;

                            command.CommandText = query;
                            command.Prepare();
                            if (Int32.Parse(command.ExecuteScalar().ToString()) == 0)                               // Not already audited
                            {
                                aID = RandomPKGenerator("SELECT AID FROM CONSUMPTION_AUDIT ", connection);

                                query = String.Format
                                        ("INSERT INTO CONSUMPTION_AUDIT (AID, DUPVAL) " +                           // Make audit record
                                         "VALUES({0}, {1}) ", aID, entity.MWh);
                                ExecuteNonQueryCommand(query, connection);

                                query = String.Format
                                        ("INSERT INTO CONSUMPTION_AUDITED(AID, RECID) " +                           // Link them
                                         "VALUES({0}, {1}) ", aID, recID);
                                ExecuteNonQueryCommand(query, connection);


                                if (sharedUpdate.DupsAndMisses.ContainsKey(entity.GID) &&
                                    sharedUpdate.DupsAndMisses[entity.GID].Item2 != null &&
                                    !sharedUpdate.DupsAndMisses[entity.GID].Item2.Contains(entity.GetHour()))       // Not first
                                {
                                    sharedUpdate.DupsAndMisses[entity.GID].Item1.Add(new Tuple<int, int>(entity.GetHour(), entity.MWh));
                                }

                                query = "SELECT cad.RECID " +                                                       // Switch miss for duplicate
                                        "FROM consumption_audited cad LEFT OUTER JOIN consumption_audit ca ON ca.AID = cad.AID " +
                                        "WHERE cad.RECID = " + chkVal + " " +
                                        "AND ca.DUPVAL = -1 ";

                                command.CommandText = query;
                                command.Prepare();
                                var tmpObject = command.ExecuteScalar();
                                int toDel;
                                if (tmpObject != null && Int32.TryParse(tmpObject.ToString(), out toDel))
                                {
                                    query = "DELETE " +                                                             // Break audit connection
                                              "FROM consumption_audited cad " +
                                              "WHERE cad.AID = " + toDel + " ";
                                    ExecuteNonQueryCommand(query, connection);

                                    query = "DELETE " +                                                             // Delete audit record
                                            "FROM consumption_audit ca " +
                                            "WHERE ca.AID = " + toDel + " ";
                                    ExecuteNonQueryCommand(query, connection);
                                }

                                if (sharedUpdate.DupsAndMisses.ContainsKey(entity.GID) &&
                                    sharedUpdate.DupsAndMisses[entity.GID].Item2 != null &&
                                    sharedUpdate.DupsAndMisses[entity.GID].Item2.Contains(entity.GetHour()))        // Remove miss from same write session
                                {
                                    sharedUpdate.DupsAndMisses[entity.GID].Item2.Remove(entity.GetHour());
                                }
                            }
                        }
                    }
                    else                                                                       // First original after misses
                    {
                        cID = RandomPKGenerator("SELECT CID FROM CONSUMPTION ", connection);   // Insert it as original conusmption


                        query = String.Format
                                ("INSERT INTO CONSUMPTION (CID, MWH) " +                       // Make consumption record
                                 "VALUES({0}, {1}) ", cID, entity.MWh);
                        ExecuteNonQueryCommand(query, connection);

                        query = String.Format
                                ("INSERT INTO CONSUMPTION_RECORDED(CID, RECID) " +             // Link them
                                 "VALUES({0}, {1}) ", cID, recID);
                        ExecuteNonQueryCommand(query, connection);



                        // Check any audits to nullify (fisrst original after miss(es))
                        query = "SELECT cad.aid " +
                                "FROM ees ee LEFT OUTER JOIN consumption_audited cad ON cad.RECID = ee.RECID " +
                                "AND ee.recid = " + recID + " " +
                                "WHERE cad.aid IS NOT NULL ";
                        using (IDbCommand command = connection.CreateCommand())
                        {
                            command.CommandText = query;
                            command.Prepare();

                            using (IDataReader reader = command.ExecuteReader())
                            {
                                int toDel;
                                while (reader.Read())
                                {
                                    toDel = reader.GetInt32(0);
                                    query = "DELETE " +                                           // Break audit connection
                                            "FROM consumption_audited cad " +
                                            "WHERE cad.AID = " + toDel + " ";
                                    ExecuteNonQueryCommand(query, connection);

                                    query = "DELETE " +                                           // Delete audit record
                                            "FROM consumption_audit ca " +
                                            "WHERE ca.AID = " + toDel + " ";
                                    ExecuteNonQueryCommand(query, connection);
                                }
                            }
                        }

                        if (sharedUpdate.DupsAndMisses.ContainsKey(entity.GID) &&
                            sharedUpdate.DupsAndMisses[entity.GID].Item2 != null &&
                            sharedUpdate.DupsAndMisses[entity.GID].Item2.Contains(entity.GetHour()))        
                        {
                            sharedUpdate.DupsAndMisses[entity.GID].Item2.Remove(entity.GetHour()); // Remove miss from same write session
                        }

                    }

                }

            }
            
        }

    }

    public void SaveAll(IEnumerable<ConsumptionRecord> entities)                         
    {
        //foreach(var elem in entities)     //Slower, more connection establishing but compact solution
        //{
        //    Save(elem);
        //} 
       
        sharedUpdate = new ConsumptionUpdate();
        string query = "";
        int recID, cID, aID, chkVal;

        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            foreach (var entity in entities)
            {   
                if (!CommonImpl.ContainsPK(entity.GID, ETableType.Geography, connection))                       // Geo known?
                {
                    query = String.Format
                            ("INSERT INTO GEOGRAPHY_SUBSYSTEM(GID, GNAME) " +                                   // Insert into geo. table
                             "VALUES('{0}','{1}') ", entity.GID, entity.GID);
                    ExecuteNonQueryCommand(query, connection);

                    sharedUpdate.NewGeos.Add(entity.GID);                                                       // Add new Geo. 
                }

                
                recID = FindEEsPK(entity, connection);
                if (recID == -1)                                                                                // Is a first miss or first consumptipn
                {
                    recID = RandomPKGenerator("SELECT RECID FROM EES ", connection);                            // Insert EES (common for consumption & audit)
                    query = String.Format
                            ("INSERT INTO EES (RECID, TIME_STAMP, GID) " +
                             "VALUES({0},'{1}', '{2}') ", recID, entity.TimeStamp, entity.GID);
                    ExecuteNonQueryCommand(query, connection);

                    if (entity.MWh == -1)                                                                       // First audit (miss)
                    {
                        aID = RandomPKGenerator("SELECT AID FROM CONSUMPTION_AUDIT ", connection);
                        query = String.Format
                                ("INSERT INTO CONSUMPTION_AUDIT (AID, DUPVAL) " +                               // Make audit record
                                 "VALUES({0}, {1}) ", aID, entity.MWh);
                        ExecuteNonQueryCommand(query, connection);

                        query = String.Format
                                ("INSERT INTO CONSUMPTION_AUDITED(AID, RECID) " +                               // Link them
                                 "VALUES({0}, {1}) ", aID, recID);
                        ExecuteNonQueryCommand(query, connection);

                        if (!sharedUpdate.DupsAndMisses.ContainsKey(entity.GID))
                        {
                            sharedUpdate.DupsAndMisses.Add(entity.GID,
                                new Tuple<List<Tuple<int, int>>, List<int>>(new List<Tuple<int, int>>(), new List<int>()));
                        }

                        sharedUpdate.DupsAndMisses[entity.GID].Item2.Add(entity.GetHour());
                    }
                    else                // First consumption
                    {
                        cID = RandomPKGenerator("SELECT CID FROM CONSUMPTION ", connection);
                        query = String.Format
                                ("INSERT INTO CONSUMPTION (CID, MWH) " +                       // Make consumption record
                                 "VALUES({0}, {1}) ", cID, entity.MWh);
                        ExecuteNonQueryCommand(query, connection);

                        query = String.Format
                                ("INSERT INTO CONSUMPTION_RECORDED(CID, RECID) " +             // Link them
                                 "VALUES({0}, {1}) ", cID, recID);
                        ExecuteNonQueryCommand(query, connection);
                    }
                }
                else                                                                           // Has audits or consumptions
                {

                    query = String.Format("SELECT car.RECID " +                                //Check has original consumption 
                               "FROM consumption_recorded car LEFT OUTER JOIN ees ee " +
                               "ON car.RECID = ee.RECID LEFT OUTER JOIN consumption cac " +
                               "ON cac.CID = car.CID " +
                               "WHERE car.RECID = {0} ", recID);

                    using (IDbCommand command = connection.CreateCommand())
                    {
                        command.CommandText = query;
                        command.Prepare();
                        var tmpObj = command.ExecuteScalar();
                        if (tmpObj == null) chkVal = -1;
                        else if (!Int32.TryParse(tmpObj.ToString(), out chkVal)) chkVal = -1;
                    }

                    if (entity.MWh == -1)                                                                       // Is a miss
                    {

                        if (chkVal == -1)                                                                       // And has no original consumption
                        {
                            query = "SELECT count(*) " +
                                    "FROM consumption_audited cad LEFT OUTER JOIN ees ee " +
                                    "ON cad.RECID = ee.RECID LEFT OUTER JOIN consumption_audit ca " +
                                    "ON ca.AID = cad.AID " +
                                    "WHERE cad.RECID =  " + recID+" "+
                                    "AND ca.DUPVAL =  " + entity.MWh +" ";

                            using (IDbCommand command = connection.CreateCommand())
                            {
                                command.CommandText = query;
                                command.Prepare();

                                if (Int32.Parse(command.ExecuteScalar().ToString()) == 0)                       // Not the exact one
                                {

                                    aID = RandomPKGenerator("SELECT AID FROM CONSUMPTION_AUDIT ", connection);
                                    query = String.Format
                                            ("INSERT INTO CONSUMPTION_AUDIT (AID, DUPVAL) " +                   // Make audit record
                                             "VALUES({0}, {1}) ", aID, entity.MWh);
                                    ExecuteNonQueryCommand(query, connection);

                                    query = String.Format
                                            ("INSERT INTO CONSUMPTION_AUDITED(AID, RECID) " +                   // Link them
                                             "VALUES({0}, {1}) ", aID, recID);
                                    ExecuteNonQueryCommand(query, connection);

                                    if (!sharedUpdate.DupsAndMisses.ContainsKey(entity.GID))
                                    {
                                        sharedUpdate.DupsAndMisses.Add(entity.GID,
                                            new Tuple<List<Tuple<int, int>>, List<int>>(new List<Tuple<int, int>>(), new List<int>()));
                                    }
                                    sharedUpdate.DupsAndMisses[entity.GID].Item2.Add(entity.GetHour());
                                }


                            }
                        }
                        //Miss and has original value => Ignore
                    }
                    else                                                                                                     // Duplicate or original after misses
                    {


                        if (chkVal != -1)   // Original exists
                        {
                            using (IDbCommand command = connection.CreateCommand())
                            {
                                command.CommandText = query;
                                command.Prepare();

                                if (Int32.Parse(command.ExecuteScalar().ToString()) == 0)                  
                                {
                                    query = "SELECT count(*) " +
                                            "FROM consumption_audited cad LEFT OUTER JOIN consumption_audit ca ON cad.AID = ca.AID " +
                                            "WHERE cad.RECID = " + chkVal + " " +
                                            "AND ca.DUPVAL = " + entity.MWh;

                                    command.CommandText = query;
                                    command.Prepare();
                                    if (Int32.Parse(command.ExecuteScalar().ToString()) == 0)                               // Not already audited
                                    {
                                        aID = RandomPKGenerator("SELECT AID FROM CONSUMPTION_AUDIT ", connection);

                                        query = String.Format
                                                ("INSERT INTO CONSUMPTION_AUDIT (AID, DUPVAL) " +                           // Make audit record
                                                 "VALUES({0}, {1}) ", aID, entity.MWh);
                                        ExecuteNonQueryCommand(query, connection);

                                        query = String.Format
                                                ("INSERT INTO CONSUMPTION_AUDITED(AID, RECID) " +                           // Link them
                                                 "VALUES({0}, {1}) ", aID, recID);
                                        ExecuteNonQueryCommand(query, connection);


                                        if (sharedUpdate.DupsAndMisses.ContainsKey(entity.GID) &&
                                            sharedUpdate.DupsAndMisses[entity.GID].Item2 != null &&
                                            !sharedUpdate.DupsAndMisses[entity.GID].Item2.Contains(entity.GetHour()))        // Not first
                                        {
                                            sharedUpdate.DupsAndMisses[entity.GID].Item1.Add(new Tuple<int, int>(entity.GetHour(), entity.MWh));
                                        }

                                        query = "SELECT cad.RECID " +                                                        // Switch miss for duplicate
                                                "FROM consumption_audited cad LEFT OUTER JOIN consumption_audit ca ON ca.AID = cad.AID " +
                                                "WHERE cad.RECID = " + chkVal + " " +
                                                "AND ca.DUPVAL = -1 ";

                                        command.CommandText = query;
                                        command.Prepare();
                                        var tmpObject = command.ExecuteScalar();
                                        int toDel;
                                        if (tmpObject != null && Int32.TryParse(tmpObject.ToString(), out toDel))
                                        {
                                            query = "DELETE " +                                                              // Break audit connection
                                                    "FROM consumption_audited cad " +
                                                    "WHERE cad.AID = " + toDel + " ";
                                            ExecuteNonQueryCommand(query, connection);

                                            query = "DELETE " +                                                             // Delete audit record
                                                    "FROM consumption_audit ca " +
                                                    "WHERE ca.AID = " + toDel + " ";
                                            ExecuteNonQueryCommand(query, connection);
                                        }

                                        if (sharedUpdate.DupsAndMisses.ContainsKey(entity.GID) &&
                                            sharedUpdate.DupsAndMisses[entity.GID].Item2 != null &&
                                            sharedUpdate.DupsAndMisses[entity.GID].Item2.Contains(entity.GetHour()))         // Remove timestamp miss from same session
                                        {
                                            sharedUpdate.DupsAndMisses[entity.GID].Item2.Remove(entity.GetHour());
                                        }
                                    } 
                                }
                            }
                        }
                        else               // First original after misses
                        {
                            cID = RandomPKGenerator("SELECT CID FROM CONSUMPTION ", connection);            // Insert it as original conusmption


                            query = String.Format("INSERT INTO CONSUMPTION (CID, MWH) " +                       // Make consumption record
                                                  "VALUES({0}, {1}) ", cID, entity.MWh);
                            ExecuteNonQueryCommand(query, connection);

                            query = String.Format("INSERT INTO CONSUMPTION_RECORDED(CID, RECID) " +             // Link them
                                                  "VALUES({0}, {1}) ", cID, recID);
                            ExecuteNonQueryCommand(query, connection);



                            // Check any audits to nullify (fisrst original after miss)
                            query = "SELECT cad.aid " +
                                    "FROM ees ee LEFT OUTER JOIN consumption_audited cad ON cad.RECID = ee.RECID " +
                                    "AND ee.recid = " + recID + " " +
                                    "WHERE cad.aid IS NOT NULL ";
                            using (IDbCommand command = connection.CreateCommand())
                            {
                                command.CommandText = query;
                                command.Prepare();

                                using (IDataReader reader = command.ExecuteReader())
                                {
                                    int toDel;
                                    while (reader.Read())
                                    {
                                        toDel = reader.GetInt32(0);
                                        query = "DELETE " +                                                     // Break audit connection
                                                "FROM consumption_audited cad " +
                                                "WHERE cad.AID = " + toDel + " ";
                                        ExecuteNonQueryCommand(query, connection);

                                        query = "DELETE " +                                                     // Delete audit record
                                                "FROM consumption_audit ca " +
                                                "WHERE ca.AID = " + toDel + " ";
                                        ExecuteNonQueryCommand(query, connection);
                                    }
                                }
                            }

                            if (sharedUpdate.DupsAndMisses.ContainsKey(entity.GID) &&
                                sharedUpdate.DupsAndMisses[entity.GID].Item2 != null &&
                                sharedUpdate.DupsAndMisses[entity.GID].Item2.Contains(entity.GetHour()))        // Remove miss from same write session
                            {
                                sharedUpdate.DupsAndMisses[entity.GID].Item2.Remove(entity.GetHour());
                            }
                        }
                    }
                }
            }
        }
    }

    public ConsumptionUpdate StoreConsumption(List<ConsumptionRecord> consumptionRecords)
    {
        SaveAll(consumptionRecords);
        return sharedUpdate;
    }

    public ConsumptionUpdate StoreConsumption(ConsumptionRecord consumptionRecords)
    {
        Save(consumptionRecords);
        return sharedUpdate;
    }

    private List<string> GetAllGeoPKs()
    {
        List<string> retVal = new List<string>();
        string query = "SELECT GID FROM geography_subsystem ";

        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            using (IDbCommand command = connection.CreateCommand())
            {
                command.CommandText = query;
                command.Prepare();

                using (IDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read()) retVal.Add(reader.GetString(0));
                }
                return retVal;
            }
        }
        
    }

}//end ConsumptionDAOImpl