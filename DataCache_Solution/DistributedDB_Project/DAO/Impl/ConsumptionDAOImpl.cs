///////////////////////////////////////////////////////////
//  ConsumptionDAOImpl.cs
//  Implementation of the Class ConsumptionDAOImpl
//  Generated by Enterprise Architect
//  Created on:      07-May-2021 2:59:24 PM
//  Original author: Ugljesa
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Common_Project.Classes;
using System.Data;
using DistributedDB_Project.Connection;
using Oracle.ManagedDataAccess.Client;
using System.Linq;
using DistributedDB_Project.DAO.Impl;

public class ConsumptionDAOImpl : IConsumptionDAO {

	public ConsumptionDAOImpl(){

	}

	~ConsumptionDAOImpl(){

	}

    //Later handle all DML exceptions

    public int Count()
    {
        string query = "SELECT COUNT(*) FROM CONSUMPTION;";                         //Not all EES records are consumption records

        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            using (IDbCommand command = connection.CreateCommand())
            {
                command.CommandText = query;
                command.Prepare();

                return Convert.ToInt32(command.ExecuteScalar());
            }
        }
    }

    private ConsumptionRecord LoadConumptionRecordsSingleByQuery(string query)
    {
        ConsumptionRecord retVal;
        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            using (IDbCommand command = connection.CreateCommand())
            {
                command.CommandText = query;
                command.Prepare();
                using (IDataReader reader = command.ExecuteReader())
                {
                    reader.Read();
                    retVal = new ConsumptionRecord(reader.GetString(0), reader.GetInt32(1), reader.GetString(2));
                }
            }
        }
        return retVal;
    }

    private IEnumerable<ConsumptionRecord> LoadConumptionRecordsMultipleByQuery(string query)
    {
        List<ConsumptionRecord> retVal = new List<ConsumptionRecord>();

        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            using (IDbCommand command = connection.CreateCommand())
            {
                command.CommandText = query;
                command.Prepare();

                using (IDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read()) retVal.Add(new ConsumptionRecord(reader.GetString(0), reader.GetInt32(1), reader.GetString(2)));
                }
                return retVal;
            }
        }
    }

    private void ExecuteDMLCommand(string query)
    {
        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            using (IDbCommand command = connection.CreateCommand())
            {
                command.CommandText = query;
                command.Prepare();
                try     
                { command.ExecuteScalar(); }
                catch (OracleException oe)
                { throw oe; }
            }
        }
    }

    public void Delete(ConsumptionRecord entity)
    {
        int targetRECID;
        // Later implement try-catch
        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            using (IDbCommand command = connection.CreateCommand())
            {
                string query = "SELECT ee.RECID " +
                "FROM EES ee, CONSUMPTION cc, CONSUMPTION_RECORDED cr " +    // Get targetRECID for entity
                "WHERE cr.recid = ee.recid AND cr.cid = cc.cid " +
                "AND ee.TIME_STAMP = '" + entity.TimeStamp + "'" +
                "AND ee.GID = '" + entity.GID + "' " +
                "AND cc.MWH =" + entity.MWh + " ";
                command.CommandText = query;
                command.Prepare();
                targetRECID= Convert.ToInt32(command.ExecuteScalar());   
            }
        }

        this.DeleteById(targetRECID.ToString());      
        // Note Geography records stay even after all EES records are removed (to support add through UI option)
    }

    private string FormatComplexArgument(IEnumerable<string> argList)
    {
        string outStr = "(";
        foreach(var arg in argList)
        {
            outStr += arg.ToString() + ",";
        }
        outStr.TrimEnd(',');
        return outStr+")";
    }

    public void DeleteAll()
    {

        string query =   "DELETE consumption_audited;" +
                         "DELETE consumption_recorded;" +
                         "DELETE consumption_audit;" +
                         "DELETE consumption;" +
                         "DELETE ees;";

        try { ExecuteDMLCommand(query); }
        catch (OracleException oe) { throw oe; }
    }

    public void DeleteById(string targetRECID)
    {
        // Read documentation for delete logic
        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            using (IDbCommand command = connection.CreateCommand())
            {

                string query = "SELECT cc.CID " +                                    // Get all consumption records associated with it (should be 1 only)
                        "FROM EES ee, CONSUMPTION cc, CONSUMPTION_RECORDED cr " +
                        "WHERE cr.recid = ee.recid AND cr.cid = cc.cid " +
                        "AND ee.recid =" + targetRECID;

                command.CommandText = query;
                command.Prepare();
                List<string> toDeleteCIDs = new List<string>();
                using (IDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read()) toDeleteCIDs.Add(reader.GetInt32(0).ToString());
                }


                query = "SELECT ca.AID " +                                           // Get all audit records associated with it (0:N)
                        "FROM EES ee, CONSUMPTION_AUDIT ca, CONSUMPTION_AUDITED cad " +
                        "WHERE ee.recid = cad.recid AND ca.aid = cad.aid " +
                        "AND ee.recid =" + targetRECID;
                command.CommandText = query;
                command.Prepare();
                List<string> toDeleteAIDs = new List<string>();
                using (IDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read()) toDeleteAIDs.Add(reader.GetInt32(0).ToString());
                }

                query = "DELETE" +                                                  // Break consumption connections
                         "FROM consumption_recorded cr " +
                         "WHERE cr.RECID = " + targetRECID + ";";

                query += "DELETE" +                                                  // Delete consumption records
                         "FROM consumption cc" +
                         "WHERE cc.CID IN " + FormatComplexArgument(toDeleteCIDs) + ";";

                query += "DELETE" +                                                  // Break audit connections
                         "FROM consumption_audited ca" +
                         "WHERE ca.RECID = " + targetRECID + ";";


                query += "DELETE" +                                                  // Delete audit records
                         "FROM consumption_audit ca" +
                         "WHERE ca.AID IN " + FormatComplexArgument(toDeleteAIDs) + ";";

                query += "DELETE" +                                                  // Delete EES record
                         "FROM EES ee" +
                         "WHERE ee.RECID = " + targetRECID;
                command.CommandText = query;
                command.Prepare();
                
                try { command.ExecuteScalar(); }
                catch (OracleException oe) { throw oe; }
            }
        }
    }

    public bool ExistsById(string id)
    {
        // Later implement try-catch
        using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
        {
            connection.Open();
            using (IDbCommand command = connection.CreateCommand())
            {

                string query = "SELECT ee.RECID " +
                "FROM EES ee, CONSUMPTION_RECORDED cr, CONSUMPTION cc " +    // TryGet targetRECID for entity
                "WHERE ee.recid = cr.recid " +
                "AND cc.cid = cr.cid " +
                "AND ee.RECID = " + id; 

                command.CommandText = query;
                command.Prepare();
                return command.ExecuteScalar() != null;
            }
        }
    }



    public IEnumerable<ConsumptionRecord> FindAll()
    {
        string query = "SELECT ee.gid, cc.mwh, ee.time_stamp " +
                "FROM EES ee, CONSUMPTION_RECORDED cr, CONSUMPTION cc " +
                "WHERE ee.recid = cr.recid AND cc.cid = cr.cid ";

        return LoadConumptionRecordsMultipleByQuery(query);
    }

    public IEnumerable<ConsumptionRecord> FindAllById(IEnumerable<string> ids)
    {
        string query = "SELECT ee.gid, cc.mwh, ee.time_stamp " +
                "FROM EES ee, CONSUMPTION_RECORDED cr, CONSUMPTION cc " +
                "WHERE ee.recid = cr.recid AND cc.cid = cr.cid " +
                "AND ee.recid IN " + FormatComplexArgument(ids);

       
        return LoadConumptionRecordsMultipleByQuery(query);
    }

    public ConsumptionRecord FindById(string id)
    {
        string query = "SELECT ee.gid, cc.mwh, ee.time_stamp " +
                "FROM EES ee, CONSUMPTION_RECORDED cr, CONSUMPTION cc " +
                "WHERE ee.recid = cr.recid " +
                "AND cc.cid = cr.cid " +
                "AND ee.recid=" + id;

        return LoadConumptionRecordsSingleByQuery(query);
    }

    public List<ConsumptionRecord> GetByCountry(string countryID)
    {
        string query = "SELECT ee.gid, cc.mwh, ee.time_stamp " +
                "FROM EES ee, CONSUMPTION_RECORDED cr, CONSUMPTION cc " +
                "WHERE ee.recid = cr.recid AND cc.cid = cr.cid " +
                "AND ee.GID= '" + countryID+"';";
        return (List<ConsumptionRecord>)LoadConumptionRecordsMultipleByQuery(query);
    }

    public List<ConsumptionRecord> GetByCountryAndDate(string countryID, string targetTimestamp)
    {
        string query = "SELECT ee.gid, cc.mwh, ee.time_stamp " +
        "FROM EES ee, CONSUMPTION_RECORDED cr, CONSUMPTION cc " +
        "WHERE ee.recid = cr.recid AND cc.cid = cr.cid " +
        "AND ee.GID= '" + countryID+"' "+
        "AND ee.time_stamp="+targetTimestamp ;
        return (List<ConsumptionRecord>)LoadConumptionRecordsMultipleByQuery(query);
    }

    public List<ConsumptionRecord> GetByCountryAndDatespan(string gID, string from, string till)
    {
        string query = "";
        query = "SELECT* " +
                "FROM ( " +
                        "SELECT * " +
                        "FROM ( " +
                                "SELECT * " +
                                "FROM ( " +
                                        "SELECT  ee.time_stamp, ee.gid, cc.mwh," +
                                                "CAST (SUBSTR(ee.Time_stamp,1,4) AS Integer) AS year_, " +
                                                "CAST (SUBSTR(ee.Time_stamp,6,2) AS Integer) AS month_, " +
                                                "CAST (SUBSTR(ee.Time_stamp,9,2) AS Integer) AS day_ " +

                                        "FROM EES ee, CONSUMPTION_RECORDED cr, CONSUMPTION cc " +
                                        "WHERE ee.recid=cr.recid " +
                                        "AND cc.cid=cr.cid " +
                                        "AND ee.gid='" + gID + "' " +
                                      ") " +
                                      "WHERE year_  BETWEEN " + from.Substring(1, 4) + " AND " + till.Substring(1, 4) + " " +
                              ") " +
                         "WHERE month_ BETWEEN " + from.Substring(6, 2) + " AND " + till.Substring(6, 2) + " " +
                         ") " +
                "WHERE day_   BETWEEN " + from.Substring(9, 2) + " AND " + till.Substring(9, 2) + " ";

        return (List<ConsumptionRecord>)LoadConumptionRecordsMultipleByQuery(query);
    }

    public List<ConsumptionRecord> GetByGeographyAndAfterDate(string gID, string from)
    {
        string query = "";
        query = "SELECT* " +
                "FROM ( " +
                        "SELECT * " +
                        "FROM ( " +
                                "SELECT * " +
                                "FROM ( " +
                                        "SELECT  ee.time_stamp, ee.gid, cc.mwh," +
                                                "CAST (SUBSTR(ee.Time_stamp,1,4) AS Integer) AS year_, " +
                                                "CAST (SUBSTR(ee.Time_stamp,6,2) AS Integer) AS month_, " +
                                                "CAST (SUBSTR(ee.Time_stamp,9,2) AS Integer) AS day_ " +

                                        "FROM EES ee, CONSUMPTION_RECORDED cr, CONSUMPTION cc " +
                                        "WHERE ee.recid=cr.recid " +
                                        "AND cc.cid=cr.cid " +
                                        "AND ee.gid='"+gID+"' " +
                                      ") " +
                                      "WHERE year_  >= "+from.Substring(1,4)+ " " +
                              ") " +
                         "WHERE month_ >=1 " + from.Substring(6, 2) + " " +
                         ") " +
                "WHERE day_   >= " + from.Substring(9, 2) + " ";

        return (List<ConsumptionRecord>)LoadConumptionRecordsMultipleByQuery(query);
    }

    public List<ConsumptionRecord> GetByGeographyAndBeforeDate(string gID, string before)
    {
        string query = "";
        query = "SELECT* " +
                "FROM ( " +
                        "SELECT * " +
                        "FROM ( " +
                                "SELECT * " +
                                "FROM ( " +
                                        "SELECT  ee.time_stamp, ee.gid, cc.mwh," +
                                                "CAST (SUBSTR(ee.Time_stamp,1,4) AS Integer) AS year_, " +
                                                "CAST (SUBSTR(ee.Time_stamp,6,2) AS Integer) AS month_, " +
                                                "CAST (SUBSTR(ee.Time_stamp,9,2) AS Integer) AS day_ " +

                                        "FROM EES ee, CONSUMPTION_RECORDED cr, CONSUMPTION cc " +
                                        "WHERE ee.recid=cr.recid " +
                                        "AND cc.cid=cr.cid " +
                                        "AND ee.gid='" + gID + "' " +
                                      ") " +
                                      "WHERE year_  <= " + before.Substring(1, 4) + " " +
                              ") " +
                         "WHERE month_ <=1 " + before.Substring(6, 2) + " " +
                         ") " +
                "WHERE day_   <= " + before.Substring(9, 2) + " ";

        return (List<ConsumptionRecord>)LoadConumptionRecordsMultipleByQuery(query);
    }
 
    private int RandomPKGenerator(string queryForPKs)
        {

            var exclude = new HashSet<int>();
            using (IDbConnection connection = ConnectionUtil_Pooling.GetConnection())
            {
                connection.Open();
                using (IDbCommand command = connection.CreateCommand())
                {

                    command.CommandText = queryForPKs;
                    command.Prepare();
                    using (IDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read()) exclude.Add(reader.GetInt32(0));
                    }
                }
            }

            // Possible improvement: Switching whole system from int to unsigned for bigger PK range
            var range = Enumerable.Range(0, Int32.MaxValue).Where(i => !exclude.Contains(i));

            var rand = new System.Random();
            int index = rand.Next(0, 100 - exclude.Count);
            return range.ElementAt(index);
        }
    public void Save(ConsumptionRecord entity)
    {
        /*
            // Handle new geo 
         
            INSERT INTO EES (RECID, TIME_STAMP, GID)
            VALUES (1, '2021-03-04-21', '3');
            INSERT INTO CONSUMPTION (CID, MWH)
            VALUES(1,1111);
            INSERT INTO CONSUMPTION_RECORDED(CID, RECID)
            VALUES(1,1);
         */

        int recID = RandomPKGenerator("SELECT RECID FROM EES;");
        int cID = RandomPKGenerator("SELECT CID FROM CONSUMPTION;");

        string query="";
        if (!CommonImpl.ContainsPK("SELECT GID FROM geography_subsystem;"))   
        {
            query = String.Format("INSERT INTO GEOGRAPHY_SUBSYSTEM(GID, GNAME)+" +
                         "VALUES('{0}','1') ", entity.GID, entity.GID);

            query += String.Format("INSERT INTO EES (RECID, TIME_STAMP, GID)" +             //Same GID
                        "VALUES({0}, {1}, {2}) ", recID, entity.TimeStamp, entity.GID);
        }



        query += String.Format("INSERT INTO CONSUMPTION (CID, MWH)"+
                         "VALUES({0}, {1}) ", cID, entity.MWh);

     

    }

    public void SaveAll(IEnumerable<ConsumptionRecord> entities)
    {
        throw new NotImplementedException();
    }

    public ConsumptionUpdate StoreConsumption(ConsumptionRecord consumptionRecords)
    {
        throw new NotImplementedException();
    }

    public ConsumptionUpdate StoreConsumption(List<ConsumptionRecord> consumptionRecords)
    {
        throw new NotImplementedException();
    }
}//end ConsumptionDAOImpl