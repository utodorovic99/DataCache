///////////////////////////////////////////////////////////
//  CacheControler.cs
//  Implementation of the Class CacheControler
//  Generated by Enterprise Architect
//  Created on:      28-Apr-2021 10:30:22 AM
//  Original author: Ugljesa
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using CacheControler_Project.Enums;
using CacheControler_Project.Services;
using Common_Project.Classes;
using ConnectionControler_Project.Classes;
using Common_Project.DistributedServices;

namespace CacheControler_Project.Classes
{
    public class CacheControler : IConsumptionRead
    {

        private List<AuditRecord> cachedAudit;
        private Dictionary<DSpanGeoReq, CacheHit> cachedConsumption;
        private Dictionary<string, string> cachedGeo;
        /// <summary>
        /// // Sleep period in milliseconds
        /// </summary>
        private int cacheValidPeriod;
        private int maxAudit;
        private int maxConsumptionRecords;
        private int maxGeo;
        private int usedConsumptionRecords;
        public CacheControlerAgent m_ConnectionControler;

        public CacheControler()
        {
            m_ConnectionControler = new CacheControlerAgent();
        }

        ~CacheControler()
        {

        }

        /// 
        /// <param name="geoRecord"></param>
        public EPostGeoEntityStatus AddNewGeoEntity(GeoRecord geoRecord)
        {

            return EPostGeoEntityStatus.Success;
        }

        //public List<AuditRecord> CachedAudit
        //{
        //    get
        //    {
        //        return cachedAudit;
        //    }
        //    set
        //    {
        //        cachedAudit = value;
        //    }
        //}

        //public Dictionary<DSpanGeoReq, CacheHit> CachedConsumption
        //{
        //    get
        //    {
        //        return cachedConsumption;
        //    }
        //    set
        //    {
        //        cachedConsumption = value;
        //    }
        //}

        //public Dictionary<string, string> CachedGeo
        //{
        //    get
        //    {
        //        return cachedGeo;
        //    }
        //    set
        //    {
        //        cachedGeo = value;
        //    }
        //}

        private int CacheGarbageCollector()
        {

            return 0;
        }

        /// 
        /// <param name="readReq"></param>
        public Tuple<EConcumptionReadStatus, List<ConsumptionRecord>> ConsumptionRead(DSpanGeoReq dSPanGeoReq)
        {

            return null;
        }

        /// 
        /// <param name="update"></param>
        public bool ConsumptionUpdateHandler(ConsumptionUpdate update)
        {

            return false;
        }

        /// 
        /// <param name="geoRecord"></param>
        public EGeoRecordStatus ContainsGeo(GeoRecord geoRecord)
        {

            return EGeoRecordStatus.GeoRecordFree;
        }

        /// 
        /// <param name="cRecordsNum"></param>
        private int FreeSpace(int cRecordsNum)
        {

            return 0;
        }

        public List<AuditRecord> InitAuditLoad()
        {

            return null;
        }

        public List<string> InitGeoRecordLoad()
        {

            return null;
        }

        /// 
        /// <param name="cacheHit"></param>
        private bool StoreConsumption(CacheHit cacheHit)
        {

            return false;
        }

        /// 
        /// <param name="oldID"></param>
        /// <param name="newID"></param>
        public EUpdateGeoStatus UpdateGeoEntity(string oldID, string newID)
        {

            return EUpdateGeoStatus.Success;
        }

        /// 
        /// <param name="dSpanGeoReq"></param>
        public Tuple<EConcumptionReadStatus, List<ConsumptionRecord>> DSpanGeoConsumptionRead(DSpanGeoReq dSpanGeoReq)
        {

            return null;
        }

    }//end CacheControler
}