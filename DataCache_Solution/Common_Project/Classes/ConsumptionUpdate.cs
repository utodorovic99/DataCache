///////////////////////////////////////////////////////////
//  ConsumptionUpdate.cs
//  Implementation of the Class ConsumptionUpdate
//  Generated by Enterprise Architect
//  Created on:      28-Apr-2021 10:30:23 AM
//  Original author: Ugljesa
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;

namespace Common_Project.Classes
{
    [Serializable]
    public class ConsumptionUpdate
    {
        private string timeStampBase;
        private Dictionary<string, Tuple<List<Tuple<int, int>>,List<int>>> dupsAndMisses;
        private List<string> newGeos;   

        public ConsumptionUpdate()
        {
            dupsAndMisses = new Dictionary<string, Tuple<List<Tuple<int, int>>, List<int>>>();
            newGeos = new List<string>();
            timeStampBase = "";
        }

        ~ConsumptionUpdate()
        {

        }

        public  Dictionary<string, Tuple<List<Tuple<int, int>>, List<int>>> DupsAndMisses
        {
            get { return dupsAndMisses;  }
            set { dupsAndMisses = value; }
        }

        public string TimeStampBase
        {
            get { return timeStampBase;  }

            set { timeStampBase = value; }
        }

        public List<string> NewGeos
        {
            get { return newGeos;  }
            set { newGeos = value; }
        }

        public override string ToString()
        {
            string retStr = "Consumption update with new geos:\r\n";
            foreach(var newGID in newGeos)
            {
                retStr += "\r\n" + newGID;
            }

            retStr += "\r\n" + "Duplicates and misses:\r\n";
            foreach(KeyValuePair<string, Tuple<List<Tuple<int, int>>, List<int>>> kValPair in dupsAndMisses)
            {
                retStr += "For GID " + kValPair.Key + " duplicates are:\r\n";
                foreach(var elem in kValPair.Value.Item1)
                {
                    retStr += "\r\nHour: " + elem.Item1 + " Value: " + elem.Item2;
                }

                retStr += "\r\nHours with no values are:\r\n";
                foreach(var miss in kValPair.Value.Item2)
                {
                    retStr += miss + " ";
                }
            }

            return retStr;
        }
    }//end ConsumptionUpdate
}